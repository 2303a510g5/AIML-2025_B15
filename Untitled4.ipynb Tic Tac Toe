{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOl2ixUfAhwLGZ6kKNE45Mz",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2303a510g5/AIML-2025_B15/blob/main/Untitled4.ipynb%20Tic%20Tac%20Toe\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "import random\n",
        "from collections import defaultdict\n",
        "from typing import Tuple, Optional, Dict, Callable, Any\n"
      ],
      "metadata": {
        "id": "jYriGGA-clqW"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Game:\n",
        "    def actions(self, state):\n",
        "        \"\"\"Return a list of the allowable moves at this point.\"\"\"\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def result(self, state, move):\n",
        "        \"\"\"Return the state that results from making a move from a state.\"\"\"\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def is_terminal(self, state):\n",
        "        \"\"\"Return True if this is a final state for the game.\"\"\"\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def utility(self, state, player):\n",
        "        \"\"\"Return the value of this final state to player.\"\"\"\n",
        "        raise NotImplementedError\n"
      ],
      "metadata": {
        "id": "MlznI_yEcv7E"
      },
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def minimax_search(game: Game, state) -> Tuple[float, Any]:\n",
        "    player = state.to_move\n",
        "\n",
        "    def max_value(state):\n",
        "        if game.is_terminal(state):\n",
        "            return game.utility(state, player), None\n",
        "        v, move = -math.inf, None\n",
        "        for a in game.actions(state):\n",
        "            v2, _ = min_value(game.result(state, a))\n",
        "            if v2 > v:\n",
        "                v, move = v2, a\n",
        "        return v, move\n",
        "\n",
        "    def min_value(state):\n",
        "        if game.is_terminal(state):\n",
        "            return game.utility(state, player), None\n",
        "        v, move = math.inf, None\n",
        "        for a in game.actions(state):\n",
        "            v2, _ = max_value(game.result(state, a))\n",
        "            if v2 < v:\n",
        "                v, move = v2, a\n",
        "        return v, move\n",
        "\n",
        "    return max_value(state)[1]\n"
      ],
      "metadata": {
        "id": "RrYgalkWcx9g"
      },
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def alphabeta_search(game: Game, state) -> Any:\n",
        "    player = state.to_move\n",
        "\n",
        "    def max_value(state, alpha, beta):\n",
        "        if game.is_terminal(state):\n",
        "            return game.utility(state, player), None\n",
        "        v, move = -math.inf, None\n",
        "        for a in game.actions(state):\n",
        "            v2, _ = min_value(game.result(state, a), alpha, beta)\n",
        "            if v2 > v:\n",
        "                v, move = v2, a\n",
        "            if v >= beta:\n",
        "                return v, move\n",
        "            alpha = max(alpha, v)\n",
        "        return v, move\n",
        "\n",
        "    def min_value(state, alpha, beta):\n",
        "        if game.is_terminal(state):\n",
        "            return game.utility(state, player), None\n",
        "        v, move = math.inf, None\n",
        "        for a in game.actions(state):\n",
        "            v2, _ = max_value(game.result(state, a), alpha, beta)\n",
        "            if v2 < v:\n",
        "                v, move = v2, a\n",
        "            if v <= alpha:\n",
        "                return v, move\n",
        "            beta = min(beta, v)\n",
        "        return v, move\n",
        "\n",
        "    return max_value(state, -math.inf, math.inf)[1]\n"
      ],
      "metadata": {
        "id": "lveGe8glcz8N"
      },
      "execution_count": 70,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Board(defaultdict):\n",
        "    def __init__(self, height=3, width=3, to_move='X', utility=0, board=None):\n",
        "        super().__init__()\n",
        "        self.height = height\n",
        "        self.width = width\n",
        "        self.to_move = to_move\n",
        "        self.utility = utility\n",
        "        if board:\n",
        "            self.update(board)\n",
        "        else:\n",
        "            for x in range(width):\n",
        "                for y in range(height):\n",
        "                    self[(x, y)] = ' '\n",
        "\n",
        "    def new(self, move: Tuple[int, int]):\n",
        "        new_board = Board(height=self.height, width=self.width, to_move='O' if self.to_move == 'X' else 'X', board=self)\n",
        "        new_board[move] = self.to_move\n",
        "        return new_board\n",
        "\n",
        "    def __str__(self):\n",
        "        rows = []\n",
        "        for y in range(self.height):\n",
        "            row = [self[(x, y)] for x in range(self.width)]\n",
        "            rows.append(' | '.join(row))\n",
        "        return '\\n' + '\\n' + '-' * (self.width * 4 - 3) + '\\n'.join(rows) + '\\n'\n"
      ],
      "metadata": {
        "id": "WjH6oJ1Tc2e0"
      },
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class TicTacToe(Game):\n",
        "    def __init__(self, height=3, width=3, k=3):\n",
        "        self.height = height\n",
        "        self.width = width\n",
        "        self.k = k  # Number of marks in a row needed to win\n",
        "        self.initial = Board(height=height, width=width, to_move='X')\n",
        "\n",
        "    def actions(self, state: Board) -> list:\n",
        "        return [(x, y) for x in range(self.width) for y in range(self.height) if state[(x, y)] == ' ']\n",
        "\n",
        "    def result(self, state: Board, move: Tuple[int, int]) -> Board:\n",
        "        if move not in self.actions(state):\n",
        "            raise ValueError(\"Invalid move\")\n",
        "        new_state = state.new(move)\n",
        "        new_state.utility = self.compute_utility(new_state, move)\n",
        "        return new_state\n",
        "\n",
        "    def is_terminal(self, state: Board) -> bool:\n",
        "        return state.utility != 0 or not self.actions(state)\n",
        "\n",
        "    def utility(self, state: Board, player: str) -> int:\n",
        "        return state.utility if player == 'X' else -state.utility\n",
        "\n",
        "    def compute_utility(self, state: Board, move: Tuple[int, int]) -> int:\n",
        "        player = state[(move)]\n",
        "        if self.is_winner(state, move, player):\n",
        "            return 1 if player == 'X' else -1\n",
        "        else:\n",
        "            return 0\n",
        "\n",
        "    def is_winner(self, state: Board, move: Tuple[int, int], player: str) -> bool:\n",
        "        x, y = move\n",
        "        directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n",
        "\n",
        "        for dx, dy in directions:\n",
        "            count = 1  # Count includes the current move\n",
        "            # Check in the positive direction\n",
        "            i = 1\n",
        "            while self.get(state, x + dx*i, y + dy*i) == player:\n",
        "                count += 1\n",
        "                i += 1\n",
        "            # Check in the negative direction\n",
        "            i = 1\n",
        "            while self.get(state, x - dx*i, y - dy*i) == player:\n",
        "                count += 1\n",
        "                i += 1\n",
        "            if count >= self.k:\n",
        "                return True\n",
        "        return False\n",
        "\n",
        "    def get(self, state: Board, x: int, y: int) -> Optional[str]:\n",
        "        if 0 <= x < self.width and 0 <= y < self.height:\n",
        "            return state[(x, y)]\n",
        "        else:\n",
        "            return None\n",
        "\n",
        "    def display(self, state: Board):\n",
        "        print(state)\n"
      ],
      "metadata": {
        "id": "hpcIU3fLc6up"
      },
      "execution_count": 72,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def random_player(game: Game, state: Board) -> Tuple[int, int]:\n",
        "    return random.choice(game.actions(state))\n",
        "\n",
        "def player(search_algorithm: Callable) -> Callable:\n",
        "    def strategy(game: Game, state: Board):\n",
        "        return search_algorithm(game, state)\n",
        "    return strategy\n"
      ],
      "metadata": {
        "id": "7ahab9uYc8uP"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def play_game(game: Game, strategies: Dict[str, Callable], verbose: bool = False) -> Board:\n",
        "    state = game.initial\n",
        "    while not game.is_terminal(state):\n",
        "        player_turn = state.to_move\n",
        "        move = strategies[player_turn](game, state)\n",
        "        state = game.result(state, move)\n",
        "        if verbose:\n",
        "            print(f\"Player {player_turn} moves to {move}\")\n",
        "            game.display(state)\n",
        "    if verbose:\n",
        "        if state.utility == 0:\n",
        "            print(\"The game is a draw.\")\n",
        "        else:\n",
        "            winner = 'X' if state.utility == 1 else 'O'\n",
        "            print(f\"Player {winner} wins!\")\n",
        "    return state\n"
      ],
      "metadata": {
        "id": "uq_1VmGBdAQc"
      },
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Example usage\n",
        "if __name__ == \"__main__\":\n",
        "    # Game Strategy 1: Random player vs Alpha-Beta pruning\n",
        "    print(\"Game Strategy 1: Random Player (X) vs Alpha-Beta Pruning (O)\")\n",
        "    game1 = TicTacToe()\n",
        "    strategies1 = {\n",
        "        'X': random_player,\n",
        "        'O': player(alphabeta_search)\n",
        "    }\n",
        "    final_state1 = play_game(game1, strategies1, verbose=True)\n",
        "    print(\"Final Board State:\")\n",
        "    game1.display(final_state1)\n",
        "\n",
        "    # Game Strategy 2: Alpha-Beta pruning vs Minimax\n",
        "    print(\"\\nGame Strategy 2: Alpha-Beta Pruning (X) vs Minimax (O)\")\n",
        "    game2 = TicTacToe()\n",
        "    strategies2 = {\n",
        "        'X': player(alphabeta_search),\n",
        "        'O': player(minimax_search)\n",
        "    }\n",
        "    final_state2 = play_game(game2, strategies2, verbose=True)\n",
        "    print(\"Final Board State:\")\n",
        "    game2.display(final_state2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x-Z7KveXdDjE",
        "outputId": "71cea00e-1361-4e92-8aca-a0b3e60ab90d"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Game Strategy 1: Random Player (X) vs Alpha-Beta Pruning (O)\n",
            "Player X moves to (0, 2)\n",
            "\n",
            "\n",
            "---------  |   |  \n",
            "  |   |  \n",
            "X |   |  \n",
            "\n",
            "Player O moves to (1, 1)\n",
            "\n",
            "\n",
            "---------  |   |  \n",
            "  | O |  \n",
            "X |   |  \n",
            "\n",
            "Player X moves to (2, 0)\n",
            "\n",
            "\n",
            "---------  |   | X\n",
            "  | O |  \n",
            "X |   |  \n",
            "\n",
            "Player O moves to (0, 1)\n",
            "\n",
            "\n",
            "---------  |   | X\n",
            "O | O |  \n",
            "X |   |  \n",
            "\n",
            "Player X moves to (1, 0)\n",
            "\n",
            "\n",
            "---------  | X | X\n",
            "O | O |  \n",
            "X |   |  \n",
            "\n",
            "Player O moves to (0, 0)\n",
            "\n",
            "\n",
            "---------O | X | X\n",
            "O | O |  \n",
            "X |   |  \n",
            "\n",
            "Player X moves to (2, 1)\n",
            "\n",
            "\n",
            "---------O | X | X\n",
            "O | O | X\n",
            "X |   |  \n",
            "\n",
            "Player O moves to (2, 2)\n",
            "\n",
            "\n",
            "---------O | X | X\n",
            "O | O | X\n",
            "X |   | O\n",
            "\n",
            "Player O wins!\n",
            "Final Board State:\n",
            "\n",
            "\n",
            "---------O | X | X\n",
            "O | O | X\n",
            "X |   | O\n",
            "\n",
            "\n",
            "Game Strategy 2: Alpha-Beta Pruning (X) vs Minimax (O)\n",
            "Player X moves to (0, 0)\n",
            "\n",
            "\n",
            "---------X |   |  \n",
            "  |   |  \n",
            "  |   |  \n",
            "\n",
            "Player O moves to (1, 1)\n",
            "\n",
            "\n",
            "---------X |   |  \n",
            "  | O |  \n",
            "  |   |  \n",
            "\n",
            "Player X moves to (0, 1)\n",
            "\n",
            "\n",
            "---------X |   |  \n",
            "X | O |  \n",
            "  |   |  \n",
            "\n",
            "Player O moves to (0, 2)\n",
            "\n",
            "\n",
            "---------X |   |  \n",
            "X | O |  \n",
            "O |   |  \n",
            "\n",
            "Player X moves to (2, 0)\n",
            "\n",
            "\n",
            "---------X |   | X\n",
            "X | O |  \n",
            "O |   |  \n",
            "\n",
            "Player O moves to (1, 0)\n",
            "\n",
            "\n",
            "---------X | O | X\n",
            "X | O |  \n",
            "O |   |  \n",
            "\n",
            "Player X moves to (1, 2)\n",
            "\n",
            "\n",
            "---------X | O | X\n",
            "X | O |  \n",
            "O | X |  \n",
            "\n",
            "Player O moves to (2, 1)\n",
            "\n",
            "\n",
            "---------X | O | X\n",
            "X | O | O\n",
            "O | X |  \n",
            "\n",
            "Player X moves to (2, 2)\n",
            "\n",
            "\n",
            "---------X | O | X\n",
            "X | O | O\n",
            "O | X | X\n",
            "\n",
            "The game is a draw.\n",
            "Final Board State:\n",
            "\n",
            "\n",
            "---------X | O | X\n",
            "X | O | O\n",
            "O | X | X\n",
            "\n"
          ]
        }
      ]
    }
  ]
}